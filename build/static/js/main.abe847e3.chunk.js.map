{"version":3,"sources":["InfoBox.js","Table.js","util.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","Table","countries","map","country","sortData","data","sortedData","sort","a","b","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","type","time","parser","yAxes","gridLines","ticks","callback","index","values","LineGraph","caseType","useState","setData","useEffect","fetch","then","response","json","chartData","buildChartData","console","log","fetchData","lastDataPoint","date","newDataPoint","x","y","push","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","countryInfo","setCountryInfo","tableData","setTableData","name","iso2","getCountryData","FormControl","Select","varaiant","onChange","event","countryCode","target","url","MenuItem","key","todayCases","todayRecovered","recovered","todayDeaths","deaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.abe847e3.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nfunction InfoBox({ title, cases, total }) {\r\n    return (\r\n        <Card className=\"infoBox\">\r\n            <CardContent>\r\n                <Typography className=\"InfoBox_title\" color=\"text-secondary\">\r\n                    {title}\r\n                </Typography>\r\n\r\n                <h2 className=\"infoBox_cases\">{cases}</h2>\r\n\r\n                <Typography className=\"infoBox_total\"> \r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>    \r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react';\r\nimport './Table.css';\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div>\r\n            <div className=\"table\">\r\n                {countries.map(country => (\r\n                    <tr>\r\n                        <td>{country.country}</td>\r\n                        <td><strong>{country.cases}</strong></td>\r\n                     </tr>   \r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","export const sortData = (data) => { \r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => { \r\n    if (a.cases > b.cases) {\r\n        return -1;\r\n    } else { \r\n        return 1;\r\n    }\r\n    })\r\n    return sortedData;\r\n}\r\n","import React,{ useEffect, useState } from 'react'\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: \"false\",\r\n        callbacks: {\r\n            label: function (tooltipItem, data) { \r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    parser: \"MM/DD/YY\",\r\n                    tooltipItem: 'll',\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) { \r\n                        return numeral(value).format(\"0a\");   \r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    }\r\n}\r\n\r\nfunction LineGraph({ caseType = 'cases' }) {\r\n\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            await\r\n                fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=20\")\r\n                    .then(response => response.json())\r\n                    .then(data => {\r\n                        const chartData = buildChartData(data, 'cases');\r\n                        setData(chartData);\r\n                        console.log(data);\r\n                    });\r\n        };\r\n\r\n        fetchData();\r\n    }, [caseType]);\r\n    \r\n    const buildChartData = (data, caseType = 'cases') => { \r\n        const chartData = [];\r\n        let lastDataPoint;\r\n\r\n         for(let date in data.cases) {\r\n            if (lastDataPoint) { \r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[caseType][date] - lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[caseType][date]\r\n            //console.log(date);\r\n        } \r\n        return chartData;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                options={options}   \r\n                data={{\r\n                datasets : [\r\n                    {\r\n                    backgroundColor: \"red\",\r\n                    borderColor: \"##CC1034\",\r\n                    data: data\r\n                    },\r\n                ],\r\n                }} />\r\n            )}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState, useEffect } from 'react';\nimport { FormControl, MenuItem, Select, Card } from '@material-ui/core';\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport Table from './Table';\nimport { sortData } from './util';\nimport LineGraph from './LineGraph';\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  \n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(response => response.json())\n      .then(data => setCountryInfo(data));\n  }, []);\n\n  //USEEFFECT - Runs a piece of code based on condition\n\n  // https://disease.sh/v3/covid-19/countries\n\n  useEffect(() => {\n    // async -> send a request and wait for it to send the data\n\n    const getCountryData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2,\n            }\n          ));\n          setCountries(countries);\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountryData();\n    }, []);\n  \n  const onCountryChange = (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n     fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n      })\n  };\n  //console.log(countryInfo);\n\n  return (\n    <div className=\"App\">\n      \n      <div className=\"app_left\">\n        <div className=\"app_header\">\n        <h1>COVID-19 TRACKER</h1> \n        <FormControl className=\"app_dropdown\">\n          <Select varaiant=\"outlined\" value={country} onChange={onCountryChange}>\n            {/* Loop through the countries and show a drop down list of the options */}   \n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            {\n              countries.map(country => (\n                <MenuItem key={country.name} value={country.value}>{country.name}</MenuItem>\n              ))}\n\n\n        {/* <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n        <MenuItem value=\"Option 2\">Option 2</MenuItem>\n        <MenuItem value=\"Option 3\">Option 3</MenuItem>\n        <MenuItem value=\"YOOO\">YOOO</MenuItem> */}\n          </Select>\n\n        </FormControl>\n      </div>\n\n        <div className=\"app_stats\">\n            {/* InfoBoxs title=\"Caronavirus cases\" */}\n            {/* InfoBoxs title=\"Caronavirus recoveries\" */}\n            {/* InfoBoxs title=\"Caronavirus deaths\" */}\n            \n          <InfoBox title=\"Caronavirus cases\" cases={countryInfo.todayCases} total={countryInfo.cases} />\n          <InfoBox title=\"Recoveries\" cases={countryInfo.todayRecovered} total={countryInfo.recovered}/>\n            <InfoBox title=\"Deaths\" cases={countryInfo.todayDeaths} total={countryInfo.deaths}/>\n\n        </div>\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <h3>Worldwide new cases</h3>\n        <LineGraph/>\n      </div>        \n      \n      <Card className=\"app_right\">\n        <h3>Live cases by country</h3>\n        <Table countries={tableData} />\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}